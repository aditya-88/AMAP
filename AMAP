#!/usr/bin/env python3
__author__ = 'aditya.onco@gmail.com'
import sys
import os
import os.path
import distutils.spawn
import multiprocessing
import re
threads = multiprocessing.cpu_count()
#blast_record = ""
#from Bio.Blast import NCBIXML
check = 0
#   Setting Up  #
version = "0.24"
print("\nWelcome to AMAP version {}!\n".format(version))
citation = "Singh, A., & Bhatia, P., (2016). Automated Mutation Analysis Pipeline (AMAP): a tool for rapidly analyzing Sanger sequencing data with minimum user interference.\nManuscript under publication."
#   EDIT THESE VALUES TO MATCH YOUR INSTALLATION    #
# Also, if execution fails, edit the first line to match with your Python version.
seqtk = "/Users/aditya/softwares/seqtk/seqtk"
seaview = "/Applications/seaview.app/Contents/MacOS/seaview"

#   DO NOT EDIT ANYTHING BELOW THIS LINE    #

##################################################################################################################################
## Typical usage                                                                                                                ##
## AMAP F/R/FR/FE/RE/FRE Forward_seq.ab1 Reverse_seq.ab1 Exons.fasta AminoAcidReference.fasta Reference_seq.fasta               ##
## Where:                                                                                                                       ##
## 'F' means you are giving only forward sequences for alignment                                                                ##
## 'R' means you are giving only reverse sequences for alignment                                                                ##
## 'FR' means you are giving both Forward and Reverse sequences for alignment                                                   ##
## Adding 'E' to the argument will enable exon extraction based on supplied exon file, its translation and alignment with       ##
## reference amino acid fasta file.                                                                                             ##
## AMAP uses all the cores available from system for running BLAST.                                                             ##
## For multiplex usage for n number of samples:                                                                                 ##
## Example:                                                                                                                     ##
## n = 2; That is, Sample A and B.                                                                                              ##
## Typical Usage for such a sceneario:                                                                                          ##
## AMAP Forward_seq_Sample_A.ab1 Forward_seq_Sample_B.ab1 Reverse_seq_Sample_A.ab1 Reverse_seq_Sample_B.ab1 Reference_Seq.fasta ##
## Reverse Sequence should not be reverse complemented, the software does it on it's own.                                       ##
## Kindly note that SeaView will not be automatically launched in case of multiplex run.                                        ##
## You can manually open the *._result.aln file to visualize the alignment.                                                     ##
## Requirements:                                                                                                                ##
## Linux/Unix System with EMBOSS, SEQTK, Python 3.x, BioPython, NCBI BLAST+ Suite & CLUSTALW2 installed.                        ##
## Made and tested on Mac OS X 10.11.4 with Pyhton 3.4, BioPython 1.66, EMBOSS 6.5.7, SEQTK, CLUSTALW2 2.1                      ##
##                                                                                                                              ##
## Optional:                                                                                                                    ##
## Make the code executable using "chmod +x AMAP" and copy it to your system's PATH for easy invoking it from any folder.       ##
##                                                                                                                              ##
## You can download these freely available softwares from the below given links:                                                ##
## EMBOSS       : http://emboss.sourceforge.net/download/                                                                       ##
## SEQTK        : https://github.com/lh3/seqtk                                                                                  ##
## BioPython    : http://biopython.org/wiki/Main_Page                                                                           ##
## SeaView      : http://doua.prabi.fr/software/seaview                                                                         ##
## NCBI BLAST+  : ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/                                                   ##
##                                                                                                                              ##
## Description of results:                                                                                                      ##
## *._Forward_Sequence_QC.fastq             : QC Trimmed Forward Sequence in FASTQ format.                                      ##
## *._Reverse_Sequence_QC.fastq             : QC Trimmed Reverse complemented reverse sequence in FASTQ format.                 ##
## *._consensus.fasta                       : Consensus sequence in FASTA format.                                               ##
## *._result.aln                            : Alignemnet of consensus with reference sequecne in ALN format.                    ##
## *._result.fasta_report.txt               : CLustalW2 alignment report.                                                       ##
## *.consensus_BLAST.txt                    : Simplified BLAST result between Exonic sequence and extracted exon.               ##
## *.EXON_*                                 : Files related with Exon extraction.                                               ##
##                                                                                                                              ##
## Thanks for using the program!                                                                                                ##
## For any suggestions/queries please contact:                                                                                  ##
## Aditya Singh                                                                                                                 ##
## Ph.D. Scholar                                                                                                                ##
## Advanced Paediatrics Center                                                                                                  ##
## Post Graduate Institute of Medical Education and Research                                                                    ##
## Chandigarh, India                                                                                                            ##
## aditya.onco@gmail.com; adityas@live.in                                                                                       ##
##################################################################################################################################

#   Check system and command    #
print("\nChecking system for installation of required programs and the commandline arguments.\nTotal 7 tests to perform.")
if os.path.isfile(seqtk):
    print("\n1. SEQTK seems installed!\t\tPASS")
else:
    print("\n1. SEQTK was not found!\nPlease make sure it's installed and location updated at the top of this file.\t\tFAIL")
    check=+1
if os.path.isfile(seaview):
    print("2. SeaView seems installed!\t\tPASS")
else:
    print("2. SeaView was not found!\nPlease make sure it's installed and location updated at the top of this file.\t\tFAIL")
    check=+1
try:
    from Bio import SeqIO
    from Bio.Blast import NCBIXML
    print("3. BioPython seems installed!\t\tPASS")
except ImportError as e:
    print("3. Biopython is not installed! Please install the same and make sure the executables are available in your PATH\t\tFAIL")
    check=+1
if distutils.spawn.find_executable('merger') is not None:
    print("4. EMBOSS seems installed.\t\tPASS")
else:
    print("4. EMBOSS does not seems to be install. Install it and make sure it is available in System PATH\t\tFAIL")
    check=+1
if distutils.spawn.find_executable('clustalw2') is not None:
    print("5. CLUSTALW2 seems installed.\t\tPASS")
else:
    print("5. CLUSTALW2 does not seems to be install. Install it and make sure it is available in System PATH\t\tFAIL")
    check=+1
if len(sys.argv) >= 4:
    print("6. Command arguments seems correct.\tPASS")
else:
    print("6. Command Error!\t\t\tFAIL\nCheck your command...\nTypical usage:\nAMAP F/R/FR/FE/RE/FRE Forward_Seq.ab1 Reverse_Seq.ab1 Exons.fasta AminoAcid.fasta Reference_seq.fasta")
    check=+1
if distutils.spawn.find_executable('blastn') is not None:
    print("7. NCBI BLAST+ seems to be intalled.\tPASS")
else:
    print("NCBI BLAST+ does not seems to be installed or not in PATH. Please check.")
    check=+1
if check > 0:
    print("\n{} out of 7 system tests failed. Please check the above mentioned errors and try again.\nThank you!".format(check))
    exit()
else:
    pass
print("\nSystem check: PASS\nWelcome to Automated Mutation Analysis Pipeline (AMAP) version {0} by Aditya Singh\naditya.onco@gmail.com.\nWill utilize all {1} available threads of the system for NCBI BLAST.".format(version, threads))
## Importing requirements
import os.path
from Bio.Align.Applications import ClustalwCommandline
from Bio import AlignIO
#_______________Multiplexing
exons = ""
all_sequences = sys.argv[2:-1]
mode = sys.argv[1]
number_of_sequences = int(len(all_sequences))
if mode.upper() == "FR":
    print("Running in dual mode per sample (Forward and Reverse sequence per sample)\n")
    half = int(number_of_sequences/2)
    forward_sequences = all_sequences[:half]
    reverse_sequences = all_sequences[half:]
    count = 0
    reference_seq = sys.argv[-1]

#   WORKING Dual mode#
    while (count <= half-1):
        try:
            Forward_seq = open(forward_sequences[count], "rb")
        except FileNotFoundError:
            print("\nCheck the file address.\n'{}' : File not found.\nProgram will exit now.\nResults might be incomplete.\nPlease verify the file addresses and try again.".format(forward_sequences[count]))
            exit()
        try:
            Reverse_seq = open(reverse_sequences[count], "rb")
        except FileNotFoundError:
            print("\nCheck the file address.\n'{}' : File not found. Program will exit now.\nResults might be incomplete.\nPlease verify the file addresses and try again.".format(reverse_sequences[count]))
            exit()
        forward_file = open(Forward_seq.name[:-4]+"_Forward_Sequence.fastq", 'w+b')
        reverse_file_not_rev = open(Forward_seq.name[:-4]+"_Reverse_Sequence_Not_Reversed.fastq", 'w+b')
        reverse_file = open(Forward_seq.name[:-4]+"_Reverse_Sequence.fastq", 'w+b')
        Forward_fastq = SeqIO.convert(Forward_seq, "abi",forward_file.name, "fastq" )
        Reverse_fastq = SeqIO.convert(Reverse_seq, "abi",reverse_file_not_rev.name, "fastq" )
        os.system(seqtk+" seq -r "+reverse_file_not_rev.name+" > "+reverse_file.name)
        print("Performing Quality control and building consensus sequence....")
        os.system(seqtk+" trimfq -q 0.01 "+forward_file.name+" > "+forward_file.name[:-6] + "_QC.fastq")
        os.system(seqtk+" trimfq -q 0.01 "+reverse_file.name+" > "+reverse_file.name[:-6] + "_QC.fastq")
        os.system("merger "+"-verbose "+ "-asequence "+forward_file.name[:-6] + "_QC.fastq"+" -bsequence "+reverse_file.name[:-6] + "_QC.fastq"+" -outfile "+reverse_file.name[:-23]+"_consensus_alignment.aln "+"-outseq "+reverse_file.name[:-23]+"_consensus.fasta")
        count = count+1
        size = os.stat(reverse_file.name[:-23]+"_consensus.fasta")
        if size.st_size > 50:
            print("Performing Alignment with reference sequence....")
            os.system("cat "+reference_seq+" "+reverse_file.name[:-23]+"_consensus.fasta "+"> "+reverse_file.name[:-23]+"_result.fasta")
            in_file = reverse_file.name[:-23]+"_result.fasta"
            print("Chosen file:\n",in_file)
            clustalw_cline = ClustalwCommandline("clustalw2", infile=in_file)
            print("Running program....\n",clustalw_cline)
            os.system(str(clustalw_cline)+">"+in_file+"_report.txt")
            alignment = AlignIO.read(in_file[:-6]+".aln", "clustal")
            if len(forward_sequences)>=2:
                seaview_run =""
                print("\nMultiplexed usage. SeaView was not auto-launched.")
            else:
                seaview_run = seaview+" "+in_file[:-6]+".aln"
            os.system(seaview_run)
        else:
            print("\n\nA very shot consensus sequence of {} bytes made. Not using it. Check sequence quality.\n\n".format(size.st_size))
#   Renaming and Purging of unimportant files    #
        os.system("rm "+reverse_file.name[:-23]+"_consensus_alignment.aln "+Forward_seq.name[:-4]+"_Reverse_Sequence_Not_Reversed.fastq "+forward_file.name+" "+reverse_file.name+" ")

# EXON Extraction___________________________________________

elif mode.upper() == "FRE":
    print("Running in dual mode per sample (Forward and Reverse sequence per sample) and also extracting Exonic region\n")
    all_sequences = sys.argv[2:-3]
    exons = sys.argv[-3]
    amino_acid = sys.argv[-2]
    number_of_sequences = int(len(all_sequences))
    half = int(number_of_sequences/2)
    forward_sequences = all_sequences[:half]
    reverse_sequences = all_sequences[half:]
    count = 0
    reference_seq = sys.argv[-1]
    os.system("makeblastdb -in "+exons+" -out "+exons+"_DB"+" -dbtype nucl")
#   WORKING Dual mode#
    while (count <= half-1):
        try:
            Forward_seq = open(forward_sequences[count], "rb")
        except FileNotFoundError:
            print("\nCheck the file address.\n'{}' : File not found.\nProgram will exit now.\nResults might be incomplete.\nPlease verify the file addresses and try again.".format(forward_sequences[count]))
            exit()
        try:
            Reverse_seq = open(reverse_sequences[count], "rb")
        except FileNotFoundError:
            print("\nCheck the file address.\n'{}' : File not found. Program will exit now.\nResults might be incomplete.\nPlease verify the file addresses and try again.".format(reverse_sequences[count]))
            exit()
        forward_file = open(Forward_seq.name[:-4]+"_Forward_Sequence.fastq", 'w+b')
        reverse_file_not_rev = open(Forward_seq.name[:-4]+"_Reverse_Sequence_Not_Reversed.fastq", 'w+b')
        reverse_file = open(Forward_seq.name[:-4]+"_Reverse_Sequence.fastq", 'w+b')
        Forward_fastq = SeqIO.convert(Forward_seq, "abi",forward_file.name, "fastq" )
        Reverse_fastq = SeqIO.convert(Reverse_seq, "abi",reverse_file_not_rev.name, "fastq" )
        os.system(seqtk+" seq -r "+reverse_file_not_rev.name+" > "+reverse_file.name)
        print("Performing Quality control and building consensus sequence....")
        os.system(seqtk+" trimfq -q 0.01 "+forward_file.name+" > "+forward_file.name[:-6] + "_QC.fastq")
        os.system(seqtk+" trimfq -q 0.01 "+reverse_file.name+" > "+reverse_file.name[:-6] + "_QC.fastq")
        os.system("merger "+"-verbose "+ "-asequence "+forward_file.name[:-6] + "_QC.fastq"+" -bsequence "+reverse_file.name[:-6] + "_QC.fastq"+" -outfile "+reverse_file.name[:-23]+"_consensus_alignment.aln "+"-outseq "+reverse_file.name[:-23]+"_consensus.fasta")
        count = count+1
        size = os.stat(reverse_file.name[:-23]+"_consensus.fasta")
        if size.st_size > 50:
            #print(os.stat(reverse_file.name[:-23]+"_consensus.fasta".st_size))
            os.system("blastn -query "+reverse_file.name[:-23]+"_consensus.fasta -db "+exons+"_DB -out "+reverse_file.name[:-23]+"_consensus_BLAST.xml -max_hsps 1 -num_alignments 1 -outfmt 5 -num_threads "+str(threads))
            result = open(reverse_file.name[:-23]+"_consensus_BLAST.xml", "r")
            outfile = open(reverse_file.name[:-23]+"_consensus_BLAST.txt", "w")
            blast_records = NCBIXML.parse(result)
            for record in blast_records:
                for alignment in record.alignments:
                    for hsp in alignment.hsps:
                        extracted_exon = hsp.query
                        extracted_exon = re.sub('-', "", extracted_exon)
                        os.system("echo '>"+os.path.basename(reverse_file.name)[:-23]+ "\n"+extracted_exon+"' > "+reverse_file.name[:-23]+"_EXON.fasta")
                        pi = float(hsp.identities)/float(alignment.length)*100
                        pi_deci = round(pi,ndigits=2)
                        print("Percent Identiy with the Exonic region",pi_deci)
                        print ('sequence:', alignment.title,"\t", len(hsp.sbjct))
                        outfile.write(os.path.basename(reverse_file.name)[:-23]+"\n")
                        outfile.write('\n****Alignment****\n\n')
                        outfile.write("Sequence: "+ str(alignment.title) + "\n")
                        outfile.write("Percent Identity: "+ str(pi_deci)+"%"+ "\n")
                        outfile.write("Length: "+ str(alignment.length) + "\n")
                        outfile.write("e-value: "+ str(hsp.expect) + "\n")
                        outfile.write("Gaps: "+ str(hsp.gaps) + "\n")
                        outfile.write("Query:   "+ str(hsp.query[0:75]) + "\n")
                        outfile.write("Match:   "+ str(hsp.match[0:75]) + "\n")
                        outfile.write("Subject: "+ str(hsp.sbjct[0:75]) + "\n")
            os.system("degapseq -sequence "+reverse_file.name[:-23]+"_EXON.fasta"+" -outseq "+reverse_file.name[:-23])
            print("Translating input sequence at frames +1, +2 & +3...\n")
            os.system("transeq -sequence "+reverse_file.name[:-23]+"_EXON.fasta"+" -outseq "+reverse_file.name[:-23]+"_EXON_AminoAcid.fasta"+" -frame 6")
            os.system("cat "+amino_acid+" "+reverse_file.name[:-23]+"_EXON_AminoAcid.fasta"+" "+" > "+reverse_file.name[:-23]+"_EXON_AminoAcid_with_Reference.fasta")
            in_file_amino_acid = reverse_file.name[:-23]+"_EXON_AminoAcid_with_Reference.fasta"
            clustalw_cline_amino_acid = ClustalwCommandline("clustalW2", infile=in_file_amino_acid)
            print("Aligning translated amino acid with reference protein sequence '{}'\n".format(amino_acid))
            os.system(str(clustalw_cline_amino_acid)+">"+in_file_amino_acid+"_report.txt")
            print("Performing nucleic acid alignment with reference sequence....")
            os.system("cat "+reference_seq+" "+reverse_file.name[:-23]+"_consensus.fasta "+"> "+reverse_file.name[:-23]+"_result.fasta")
            in_file = reverse_file.name[:-23]+"_result.fasta"
            print("Chosen file:\n",in_file)
            clustalw_cline = ClustalwCommandline("clustalw2", infile=in_file)
            print("Running program....\n",clustalw_cline)
            os.system(str(clustalw_cline)+">"+in_file+"_report.txt")
            alignment = AlignIO.read(in_file[:-6]+".aln", "clustal")
            if len(forward_sequences)>=2:
                seaview_run =""
                print("\nMultiplexed usage. SeaView was not auto-launched.")
            else:
                seaview_run = seaview+" "+in_file[:-6]+".aln"
            os.system(seaview_run)
        else:
            print("\n\nA very shot consensus sequence of {} bytes made. Not using it. Check sequence quality.\n\n".format(size.st_size))
        #   Renaming and Purging of unimportant files    #
            os.system("rm "+reverse_file.name[:-23]+"_consensus_alignment.aln "+Forward_seq.name[:-4]+"_Reverse_Sequence_Not_Reversed.fastq "+forward_file.name+" "+reverse_file.name+" ")
elif mode.upper() == "F":
    print("Running in Forward ONLY mode per sample (Only Forward sequence per sample)\n")
    forward_sequences = all_sequences
    count = 0
    reference_seq = sys.argv[-1]
#   WORKING forward only mode#
    while (count <= number_of_sequences-1):
        try:
            Forward_seq = open(forward_sequences[count], "rb")
        except FileNotFoundError:
            print("\nCheck the file address.\n'{}' : File not found.\nProgram will exit now.\nResults might be incomplete.\nPlease verify the file addresses and try again.".format(forward_sequences[count]))
            exit()
        forward_file = open(Forward_seq.name[:-4]+"_Forward_Sequence.fastq", 'w+b')
        Forward_fastq = SeqIO.convert(Forward_seq, "abi",forward_file.name, "fastq" )
        print("Performing Quality control....")
        os.system(seqtk+" trimfq -q 0.01 "+forward_file.name+" > "+forward_file.name[:-6] + "_QC.fastq")
        os.system(seqtk +" seq -a "+forward_file.name[:-6] + "_QC.fastq >"+forward_file.name[:-23]+"_consensus.fasta")
        count = count+1
        print("Performing Alignment with reference sequence....")
        os.system("cat "+reference_seq+" "+forward_file.name[:-23]+"_consensus.fasta "+"> "+forward_file.name[:-23]+"_result.fasta")
        in_file = forward_file.name[:-23]+"_result.fasta"
        print("Chosen file:\n",in_file)
        clustalw_cline = ClustalwCommandline("clustalw2", infile=in_file)
        print("Running program....\n",clustalw_cline)
        os.system(str(clustalw_cline)+">"+in_file+"_report.txt")
        alignment = AlignIO.read(in_file[:-6]+".aln", "clustal")
        if len(forward_sequences)>=2:
            seaview_run =""
            print("\nMultiplexed usage. SeaView was not auto-launched.")
        else:
            seaview_run = seaview+" "+in_file[:-6]+".aln"
        os.system(seaview_run)
# EXON Extraction___________________________________________
elif mode.upper() == "FE":
    all_sequences = sys.argv[2:-3]
    exons = sys.argv[-3]
    amino_acid = sys.argv[-2]
    print("Running in Forward ONLY mode per sample (Only Forward sequence per sample) with Exon extraction\n")
    forward_sequences = all_sequences
    count = 0
    reference_seq = sys.argv[-1]
    os.system("makeblastdb -in "+exons+" -out "+exons+"_DB"+" -dbtype nucl")
#   WORKING forward only mode#
    while (count <= number_of_sequences-3):
        try:
            Forward_seq = open(forward_sequences[count], "rb")
        except FileNotFoundError:
            print("\nCheck the file address.\n'{}' : File not found.\nProgram will exit now.\nResults might be incomplete.\nPlease verify the file addresses and try again.".format(forward_sequences[count]))
            exit()
        forward_file = open(Forward_seq.name[:-4]+"_Forward_Sequence.fastq", 'w+b')
        Forward_fastq = SeqIO.convert(Forward_seq, "abi",forward_file.name, "fastq" )
        print("Performing Quality control....")
        os.system(seqtk+" trimfq -q 0.01 "+forward_file.name+" > "+forward_file.name[:-6] + "_QC.fastq")
        os.system(seqtk +" seq -a "+forward_file.name[:-6] + "_QC.fastq >"+forward_file.name[:-23]+"_consensus.fasta")
        count = count+1
        size = os.stat(forward_file.name[:-23]+"_consensus.fasta")
        if size.st_size > 50:
            os.system("blastn -query "+forward_file.name[:-23]+"_consensus.fasta -db "+exons+"_DB -out "+forward_file.name[:-23]+"_consensus_BLAST.xml -max_hsps 1 -num_alignments 1 -outfmt 5 -num_threads "+str(threads))
            result = open(forward_file.name[:-23]+"_consensus_BLAST.xml", "r")
            outfile = open(forward_file.name[:-23]+"_consensus_BLAST.txt", "w")
            blast_records = NCBIXML.parse(result)
            for record in blast_records:
                for alignment in record.alignments:
                    for hsp in alignment.hsps:
                        extracted_exon = hsp.query
                        extracted_exon = re.sub('-', "", extracted_exon)
                        os.system("echo '>"+os.path.basename(forward_file.name)[:-23]+ "\n"+extracted_exon+"' > "+forward_file.name[:-23]+"_EXON.fasta")
                        pi = float(hsp.identities)/float(alignment.length)*100
                        pi_deci = round(pi,ndigits=2)
                        print("Percent Identiy with the Exonic region",pi_deci)
                        print ('sequence:', alignment.title,"\t", len(hsp.sbjct))
                        outfile.write(os.path.basename(forward_file.name)[:-23]+"\n")
                        outfile.write('\n****Alignment****\n\n')
                        outfile.write("Sequence: "+ str(alignment.title) + "\n")
                        outfile.write("Percent Identity: "+ str(pi_deci)+"%"+ "\n")
                        outfile.write("Length: "+ str(alignment.length) + "\n")
                        outfile.write("e-value: "+ str(hsp.expect) + "\n")
                        outfile.write("Gaps: "+ str(hsp.gaps) + "\n")
                        outfile.write("Query:   "+ str(hsp.query[0:75]) + "\n")
                        outfile.write("Match:   "+ str(hsp.match[0:75]) + "\n")
                        outfile.write("Subject: "+ str(hsp.sbjct[0:75]) + "\n")
            os.system("degapseq -sequence "+forward_file.name[:-23]+"_EXON.fasta"+" -outseq "+forward_file.name[:-23])
            os.system("transeq -sequence "+forward_file.name[:-23]+"_EXON.fasta"+" -outseq "+forward_file.name[:-23]+"_EXON_AminoAcid.fasta"+" -frame 6")
            print("Translating input sequence at frames +1, +2 & +3...\n")
            os.system("transeq -sequence "+forward_file.name[:-23]+"_EXON.fasta"+" -outseq "+forward_file.name[:-23]+"_EXON_AminoAcid.fasta"+" -frame 6")
            os.system("cat "+amino_acid+" "+forward_file.name[:-23]+"_EXON_AminoAcid.fasta"+" "+" > "+forward_file.name[:-23]+"_EXON_AminoAcid_with_Reference.fasta")
            in_file_amino_acid = forward_file.name[:-23]+"_EXON_AminoAcid_with_Reference.fasta"
            clustalw_cline_amino_acid = ClustalwCommandline("clustalW2", infile=in_file_amino_acid)
            print("Aligning translated amino acid with reference protein sequence '{}'\n".format(amino_acid))
            os.system(str(clustalw_cline_amino_acid)+">"+in_file_amino_acid+"_report.txt")
            print("Performing Alignment with reference sequence....")
            os.system("cat "+reference_seq+" "+forward_file.name[:-23]+"_consensus.fasta "+"> "+forward_file.name[:-23]+"_result.fasta")
            in_file = forward_file.name[:-23]+"_result.fasta"
            print("Chosen file:\n",in_file)
            clustalw_cline = ClustalwCommandline("clustalw2", infile=in_file)
            print("Running program....\n",clustalw_cline)
            os.system(str(clustalw_cline)+">"+in_file+"_report.txt")
            alignment = AlignIO.read(in_file[:-6]+".aln", "clustal")
            if len(forward_sequences)>=2:
                seaview_run =""
                print("\nMultiplexed usage. SeaView was not auto-launched.")
            else:
                seaview_run = seaview+" "+in_file[:-6]+".aln"
            os.system(seaview_run)
        else:
            print("\n\nA very shot consensus sequence of {} bytes made. Not using it. Check sequence quality.\n\n".format(size.st_size))
elif mode.upper() == "R":
    print("Running in Reverse ONLY mode per sample (Only Reverse sequence per sample)\n")
    reverse_sequences = all_sequences
    count = 0
    reference_seq = sys.argv[-1]
#   WORKING reverse only mode#
    while (count <= number_of_sequences-1):
        try:
            Reverse_seq = open(reverse_sequences[count], "rb")
        except FileNotFoundError:
            print("\nCheck the file address.\n'{}' : File not found. Program will exit now.\nResults might be incomplete.\nPlease verify the file addresses and try again.".format(reverse_sequences[count]))
            exit()
        reverse_file_not_rev = open(Reverse_seq.name[:-4]+"_Reverse_Sequence_Not_Reversed.fastq", 'w+b')
        reverse_file = open(Reverse_seq.name[:-4]+"_Reverse_Sequence.fastq", 'w+b')
        Reverse_fastq = SeqIO.convert(Reverse_seq, "abi",reverse_file_not_rev.name, "fastq" )
        os.system(seqtk+" seq -r "+reverse_file_not_rev.name+" > "+reverse_file.name)
        print("Performing Quality control and building consensus sequence....")
        os.system(seqtk+" trimfq -q 0.01 "+reverse_file.name+" > "+reverse_file.name[:-6] + "_QC.fastq")
        os.system(seqtk+" seq -a "+reverse_file.name[:-6] + "_QC.fastq >"+reverse_file.name[:-23]+"_consensus.fasta")
        count = count+1
        print("Performing Alignment with reference sequence....")
        os.system("cat "+reference_seq+" "+reverse_file.name[:-23]+"_consensus.fasta "+"> "+reverse_file.name[:-23]+"_result.fasta")
        in_file = reverse_file.name[:-23]+"_result.fasta"
        print("Chosen file:\n",in_file)
        clustalw_cline = ClustalwCommandline("clustalw2", infile=in_file)
        print("Running program....\n",clustalw_cline)
        os.system(str(clustalw_cline)+">"+in_file+"_report.txt")
        alignment = AlignIO.read(in_file[:-6]+".aln", "clustal")
        if len(reverse_sequences) >=2:
            seaview_run =""
            print("\nMultiplexed usage. SeaView was not auto-launched.")
        else:
            seaview_run = seaview+" "+in_file[:-6]+".aln"
        os.system(seaview_run)

# EXON Extraction___________________________________________

elif mode.upper() == "RE":
    print("Running in Reverse ONLY mode per sample (Only Reverse sequence per sample) with Exon extraction\n")
    all_sequences = sys.argv[2:-3]
    exons = sys.argv[-3]
    amino_acid = sys.argv[-2]
    reverse_sequences = all_sequences
    count = 0
    reference_seq = sys.argv[-1]
    os.system("makeblastdb -in "+exons+" -out "+exons+"_DB"+" -dbtype nucl")
#   WORKING reverse only mode#
    while (count <= number_of_sequences-3):
        try:
            Reverse_seq = open(reverse_sequences[count], "rb")
        except FileNotFoundError:
            print("\nCheck the file address.\n'{}' : File not found. Program will exit now.\nResults might be incomplete.\nPlease verify the file addresses and try again.".format(reverse_sequences[count]))
            exit()
        reverse_file_not_rev = open(Reverse_seq.name[:-4]+"_Reverse_Sequence_Not_Reversed.fastq", 'w+b')
        reverse_file = open(Reverse_seq.name[:-4]+"_Reverse_Sequence.fastq", 'w+b')
        Reverse_fastq = SeqIO.convert(Reverse_seq, "abi",reverse_file_not_rev.name, "fastq" )
        os.system(seqtk+" seq -r "+reverse_file_not_rev.name+" > "+reverse_file.name)
        print("Performing Quality control and building consensus sequence....")
        os.system(seqtk+" trimfq -q 0.01 "+reverse_file.name+" > "+reverse_file.name[:-6] + "_QC.fastq")
        os.system(seqtk+" seq -a "+reverse_file.name[:-6] + "_QC.fastq >"+reverse_file.name[:-23]+"_consensus.fasta")
        count = count+1
        size = os.stat(reverse_file.name[:-23]+"_consensus.fasta")
        if size.st_size > 50:
            os.system("blastn -query "+reverse_file.name[:-23]+"_consensus.fasta -db "+exons+"_DB -out "+reverse_file.name[:-23]+"_consensus_BLAST.xml -max_hsps 1 -num_alignments 1 -outfmt 5 -num_threads "+str(threads))
            result = open(reverse_file.name[:-23]+"_consensus_BLAST.xml", "r")
            outfile = open(reverse_file.name[:-23]+"_consensus_BLAST.txt", "w")
            blast_records = NCBIXML.parse(result)
            for record in blast_records:
                for alignment in record.alignments:
                    for hsp in alignment.hsps:
                        extracted_exon = hsp.query
                        extracted_exon = re.sub('-', "", extracted_exon)
                        os.system("echo '>"+os.path.basename(reverse_file.name)[:-23]+ "\n"+extracted_exon+"' > "+reverse_file.name[:-23]+"_EXON.fasta")
                        pi = float(hsp.identities)/float(alignment.length)*100
                        pi_deci = round(pi,ndigits=2)
                        print("Percent Identiy with the Exonic region",pi_deci)
                        print ('sequence:', alignment.title,"\t", len(hsp.sbjct))
                        outfile.write(os.path.basename(reverse_file.name)[:-23]+"\n")
                        outfile.write('\n****Alignment****\n\n')
                        outfile.write("Sequence: "+ str(alignment.title) + "\n")
                        outfile.write("Percent Identity: "+ str(pi_deci)+"%"+ "\n")
                        outfile.write("Length: "+ str(alignment.length) + "\n")
                        outfile.write("e-value: "+ str(hsp.expect) + "\n")
                        outfile.write("Gaps: "+ str(hsp.gaps) + "\n")
                        outfile.write("Query:   "+ str(hsp.query[0:75]) + "\n")
                        outfile.write("Match:   "+ str(hsp.match[0:75]) + "\n")
                        outfile.write("Subject: "+ str(hsp.sbjct[0:75]) + "\n")
            os.system("degapseq -sequence "+reverse_file.name[:-23]+"_EXON.fasta"+" -outseq "+reverse_file.name[:-23])
            os.system("transeq -sequence "+reverse_file.name[:-23]+"_EXON.fasta"+" -outseq "+reverse_file.name[:-23]+"_EXON_AminoAcid.fasta"+" -frame 6")
            print("Translating input sequence at frames +1, +2 & +3...\n")
            os.system("transeq -sequence "+reverse_file.name[:-23]+"_EXON.fasta"+" -outseq "+reverse_file.name[:-23]+"_EXON_AminoAcid.fasta"+" -frame 6")
            os.system("cat "+amino_acid+" "+reverse_file.name[:-23]+"_EXON_AminoAcid.fasta"+" "+" > "+reverse_file.name[:-23]+"_EXON_AminoAcid_with_Reference.fasta")
            in_file_amino_acid = reverse_file.name[:-23]+"_EXON_AminoAcid_with_Reference.fasta"
            clustalw_cline_amino_acid = ClustalwCommandline("clustalW2", infile=in_file_amino_acid)
            print("Aligning translated amino acid with reference protein sequence '{}'\n".format(amino_acid))
            os.system(str(clustalw_cline_amino_acid)+">"+in_file_amino_acid+"_report.txt")
            print("\nPerforming Alignment with reference sequence....")
            os.system("cat "+reference_seq+" "+reverse_file.name[:-23]+"_consensus.fasta "+"> "+reverse_file.name[:-23]+"_result.fasta")
            in_file = reverse_file.name[:-23]+"_result.fasta"
            print("Chosen file:\n",in_file)
            clustalw_cline = ClustalwCommandline("clustalw2", infile=in_file)
            print("Running program....\n",clustalw_cline)
            os.system(str(clustalw_cline)+">"+in_file+"_report.txt")
            alignment = AlignIO.read(in_file[:-6]+".aln", "clustal")
            if len(reverse_sequences) >=2:
                seaview_run =""
                print("\nMultiplexed usage. SeaView was not auto-launched.")
            else:
                seaview_run = seaview+" "+in_file[:-6]+".aln"
            os.system(seaview_run)
        else:
            print("\n\nA very shot consensus sequence of {} bytes made. Not using it. Check sequence quality.\n\n".format(size.st_size))
else:
    print("'{}' is not a valid mode argument.\nMake sure you gave the mode argument correct (F/FE/FR/FRE/R/RE)\nPlease try Again".format(mode))
    exit()
os.system("rm "+reverse_file.name[:-23]+"*.dnd ")
#   End message #
print("\n\nThank you for using AMAP version {0}!\nHope it was useful to you!\n\nIf you use AMAP in your work, please cite:\n\n{1}".format(version,citation))
